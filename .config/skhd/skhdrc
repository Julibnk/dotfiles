#!/usr/bin/env sh
#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#        be found at https://github.com/koekeishiya/skhd/issues/1
#
#        A hotkey is written according to the following rules:
#
#          hotkey       = <mode> '<' <action> | <action>
#
#          mode         = 'name of mode' | <mode> ',' <mode>
#
#          action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                         <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                         <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#          keysym       = <mod> '-' <key> | <key>
#
#          mod          = 'modifier keyword' | <mod> '+' <mod>
#
#          key          = <literal> | <keycode>
#
#          literal      = 'single letter or built-in keyword'
#
#          keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#          proc_map_lst = * <proc_map>
#
#          proc_map     = <string> ':' <command> | <string>     '~' |
#                         '*'      ':' <command> | '*'          '~'
#
#          string       = '"' 'sequence of characters' '"'
#
#          command      = command is executed through '$SHELL -c' and
#                         follows valid shell syntax. if the $SHELL environment
#                         variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : yabai -m config active_window_border_color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : yabai -m config active_window_border_color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]
# open_and_move() {
# 	alt - $1 : open -a "$2" && yabai -m window --focus "$(yabai -m query --windows --app \"$2\" | jq '.[0].id')"
# }
#App shortcuts
# open_and_move t "iTerm"
# open_and_move b "Brave Browser"
# open_and_move c "Microsoft Teams"
# open_and_move n "Notion"
# open_and_move m "Microsoft Outlook"
# open_and_move p "Postman"
# open_and_move s "Spotify"

# alt - t : open -a "iTerm" && yabai -m space --focus  $(yabai -m query --windows | jq 'map(select(.app = "iTerm"))[0].space') && yabai -m window --focus "$(yabai -m query --windows | jq 'map(select(.app = "iTerm"))[0].id')"


# switch_yabai_layout() {
#     current_layout=$(yabai -m query --spaces --space | jq -r '.type')
#
#     if [ "$current_layout" == "bsp" ]; then
#         yabai -m space --layout stack
#     elif [ "$current_layout" == "stack" ]; then
#         yabai -m space --layout float
#     else
#         yabai -m space --layout bsp
#     fi
# }
# cmd - "tab" : echo 'Get used to it'

lalt - t : open -a "Ghostty"
lalt - b : open -a "Brave Browser"
lalt - c : open -a "Microsoft Teams"
lalt - n : open -a "Notion"
lalt - m : open -a "Microsoft Outlook"
lalt - p : open -a "Postman"
lalt - s : open -a "Spotify"
lalt - v : switch_yabai_layout 

# Window management
lalt - h : yabai -m window --focus west
lalt - j : yabai -m window --focus south
lalt - k : yabai -m window --focus north
lalt - l : yabai -m window --focus east

# Move between spaces
lalt - 1 : yabai -m space --focus  1 
lalt - 2 : yabai -m space --focus  2
lalt - 3 : yabai -m space --focus  3
lalt - 4 : yabai -m space --focus  4
lalt - 5 : yabai -m space --focus  5
lalt - 6 : yabai -m space --focus  6 
lalt - 7 : yabai -m space --focus  7
lalt - 8 : yabai -m space --focus  8
lalt - 9 : yabai -m space --focus  9
lalt - 0 : yabai -m space --focus  10

# send window to desktop and follow focus
shift + alt - 1 : yabai -m window --space  1; yabai -m space --focus 1
shift + alt - 2 : yabai -m window --space  2; yabai -m space --focus 2
shift + alt - 3 : yabai -m window --space  3; yabai -m space --focus 3
shift + alt - 4 : yabai -m window --space  4; yabai -m space --focus 4
shift + alt - 5 : yabai -m window --space  5; yabai -m space --focus 5
shift + alt - 6 : yabai -m window --space  6; yabai -m space --focus 6
shift + alt - 7 : yabai -m window --space  7; yabai -m space --focus 7
shift + alt - 8 : yabai -m window --space  8; yabai -m space --focus 8
shift + alt - 9 : yabai -m window --space  9; yabai -m space --focus 9
shift + alt - 0 : yabai -m window --space  10; yabai -m space --focus 10

cmd - 0x30 : echo 'Get used to!!'

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
alt - e : yabai -m window --toggle split
